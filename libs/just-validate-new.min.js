var _=Object.defineProperty,w=Object.getOwnPropertySymbols,X=Object.prototype.hasOwnProperty,Z=Object.prototype.propertyIsEnumerable,E=(e,i,s)=>i in e?_(e,i,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[i]=s,L=(e,i)=>{for(var s in i||(i={}))X.call(i,s)&&E(e,s,i[s]);if(w)for(var s of w(i))Z.call(i,s)&&E(e,s,i[s]);return e},u=(e,i,s)=>(E(e,"symbol"!=typeof i?i+"":i,s),s);!function(e,i){"object"==typeof exports&&"undefined"!=typeof module?module.exports=i():"function"==typeof define&&define.amd?define(i):(e="undefined"!=typeof globalThis?globalThis:e||self).JustValidate=i()}(this,(function(){"use strict";const e=/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,i=/^[0-9]+$/,s=/^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{8,}$/,t=/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;var l,r,o,a;(r=l||(l={})).Required="required",r.Email="email",r.MinLength="minLength",r.MaxLength="maxLength",r.Password="password",r.Number="number",r.MaxNumber="maxNumber",r.MinNumber="minNumber",r.StrongPassword="strongPassword",r.CustomRegexp="customRegexp",r.MinFilesCount="minFilesCount",r.MaxFilesCount="maxFilesCount",r.Files="files",function(e){e.Required="required"}(o||(o={})),function(e){e.Label="label",e.LabelArrow="labelArrow"}(a||(a={}));const n=e=>!!e&&"function"==typeof e.then,d={errorFieldStyle:{color:"#b81111",border:"1px solid #B81111"},errorFieldCssClass:"just-validate-error-field",successFieldCssClass:"just-validate-success-field",errorLabelStyle:{color:"#b81111"},errorLabelCssClass:"just-validate-error-label",successLabelCssClass:"just-validate-success-label",focusInvalidField:!0,lockForm:!0,testingMode:!1};return class{constructor(e,i,s){u(this,"form",null),u(this,"fields",{}),u(this,"groupFields",{}),u(this,"errors",{}),u(this,"isValid",!1),u(this,"isSubmitted",!1),u(this,"globalConfig",d),u(this,"errorLabels",[]),u(this,"successLabels",[]),u(this,"eventListeners",[]),u(this,"dictLocale",[]),u(this,"currentLocale"),u(this,"customStyleTags",{}),u(this,"onSuccessCallback"),u(this,"onFailCallback"),u(this,"tooltips",[]),u(this,"lastScrollPosition"),u(this,"isScrollTick"),u(this,"refreshAllTooltips",(()=>{this.tooltips.forEach((e=>{e.refresh()}))})),u(this,"handleDocumentScroll",(()=>{this.lastScrollPosition=window.scrollY,this.isScrollTick||(window.requestAnimationFrame((()=>{this.refreshAllTooltips(),this.isScrollTick=!1})),this.isScrollTick=!0)})),u(this,"formSubmitHandler",(e=>{e.preventDefault(),this.isSubmitted=!0,this.globalConfig.lockForm&&this.lockForm(),this.validate().finally((()=>{var i,s;this.globalConfig.lockForm&&this.unlockForm(),this.isValid?null==(i=this.onSuccessCallback)||i.call(this,e):null==(s=this.onFailCallback)||s.call(this,this.fields)}))})),u(this,"handleFieldChange",(e=>{let i,s;for(const t in this.fields){const l=this.fields[t];if(l.elem===e){i=l,s=t;break}}!i||!s||this.validateField(s,i,!0)})),u(this,"handleGroupChange",(e=>{let i,s;for(const t in this.groupFields){const l=this.groupFields[t];if(l.elems.find((i=>i===e))){i=l,s=t;break}}!i||!s||this.validateGroup(s,i)})),u(this,"handlerChange",(e=>{!e.target||(this.handleFieldChange(e.target),this.handleGroupChange(e.target),this.renderErrors())})),this.initialize(e,i,s)}initialize(e,i,s){if(this.form=null,this.errors={},this.isValid=!1,this.isSubmitted=!1,this.globalConfig=d,this.errorLabels=[],this.eventListeners=[],this.customStyleTags={},this.tooltips=[],"string"==typeof e){const i=document.querySelector(e);if(!i)throw Error(`Form with ${e} selector not found! Please check the form selector`);this.setForm(i)}else{if(!(e instanceof HTMLFormElement))throw Error("Form selector is not valid. Please specify a string selector or a DOM element.");this.setForm(e)}if(this.globalConfig=L(L({},d),i),s&&(this.dictLocale=s),this.isTooltip()){const e=document.createElement("style");e.textContent=".just-validate-error-label[data-tooltip=true]{position:fixed;padding:4px 8px;background:#423f3f;color:#fff;white-space:nowrap;z-index:10;border-radius:4px;transform:translateY(-5px)}.just-validate-error-label[data-tooltip=true]:before{content:'';width:0;height:0;border-left:solid 5px transparent;border-right:solid 5px transparent;border-bottom:solid 5px #423f3f;position:absolute;z-index:3;display:block;bottom:-5px;transform:rotate(180deg);left:calc(50% - 5px)}.just-validate-error-label[data-tooltip=true][data-direction=left]{transform:translateX(-5px)}.just-validate-error-label[data-tooltip=true][data-direction=left]:before{right:-7px;bottom:auto;left:auto;top:calc(50% - 2px);transform:rotate(90deg)}.just-validate-error-label[data-tooltip=true][data-direction=right]{transform:translateX(5px)}.just-validate-error-label[data-tooltip=true][data-direction=right]:before{right:auto;bottom:auto;left:-7px;top:calc(50% - 2px);transform:rotate(-90deg)}.just-validate-error-label[data-tooltip=true][data-direction=bottom]{transform:translateY(5px)}.just-validate-error-label[data-tooltip=true][data-direction=bottom]:before{right:auto;bottom:auto;left:calc(50% - 5px);top:-5px;transform:rotate(0)}",this.customStyleTags[a.Label]=document.head.appendChild(e),this.addListener("scroll",document,this.handleDocumentScroll)}}getLocalisedString(e){var i;return this.currentLocale&&this.dictLocale.length&&(null==(i=this.dictLocale.find((i=>i.key===e)))?void 0:i.dict[this.currentLocale])||e}getFieldErrorMessage(e,i){const s="function"==typeof e.errorMessage?e.errorMessage(this.getElemValue(i),this.fields):e.errorMessage;return this.getLocalisedString(s)||((e,i)=>{switch(e){case l.Required:return"The field is required";case l.Email:return"Email has invalid format";case l.MaxLength:return"The field must contain a maximum of :value characters".replace(":value",String(i));case l.MinLength:return"The field must contain a minimum of :value characters".replace(":value",String(i));case l.Password:return"Password must contain minimum eight characters, at least one letter and one number";case l.Number:return"Value should be a number";case l.StrongPassword:return"Password should contain minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character";case l.MaxNumber:return"Number should be less or equal than :value".replace(":value",String(i));case l.MinNumber:return"Number should be more or equal than :value".replace(":value",String(i));case l.MinFilesCount:return"Files count should be more or equal than :value".replace(":value",String(i));case l.MaxFilesCount:return"Files count should be less or equal than :value".replace(":value",String(i));case l.Files:return"Uploaded files have one or several invalid properties (extension/size/type etc)";default:return"Value is incorrect"}})(e.rule,e.value)}getFieldSuccessMessage(e,i){const s="function"==typeof e?e(this.getElemValue(i),this.fields):e;return this.getLocalisedString(s)}getGroupErrorMessage(e){return this.getLocalisedString(e.errorMessage)||(e=>e===o.Required?"The field is required":"Group is incorrect")(e.rule)}getGroupSuccessMessage(e){return this.getLocalisedString(e.successMessage)}setFieldInvalid(e,i){this.fields[e].isValid=!1,this.fields[e].errorMessage=this.getFieldErrorMessage(i,this.fields[e].elem)}setFieldValid(e,i){this.fields[e].isValid=!0,void 0!==i&&(this.fields[e].successMessage=this.getFieldSuccessMessage(i,this.fields[e].elem))}setGroupInvalid(e,i){this.groupFields[e].isValid=!1,this.groupFields[e].errorMessage=this.getGroupErrorMessage(i)}setGroupValid(e,i){this.groupFields[e].isValid=!0,this.groupFields[e].successMessage=this.getGroupSuccessMessage(i)}getElemValue(e){switch(e.type){case"checkbox":return e.checked;case"file":return e.files;default:return e.value}}validateGroupRule(e,i,s,t){if(t.rule===o.Required)("radio"===i||"checkbox"===i)&&(s.every((e=>!e.checked))?this.setGroupInvalid(e,t):this.setGroupValid(e,t))}validateFieldRule(r,o,a,d=!1){const u=a.value,c=this.getElemValue(o);if(a.plugin)a.plugin(c,this.fields)||this.setFieldInvalid(r,a);else switch(a.rule){case l.Required:(e=>{let i=e;return"string"==typeof e&&(i=e.trim()),!i})(c)&&this.setFieldInvalid(r,a);break;case l.Email:if("string"!=typeof c){this.setFieldInvalid(r,a);break}(i=>e.test(i))(c)||this.setFieldInvalid(r,a);break;case l.MaxLength:if(void 0===u){console.error(`Value for ${a.rule} rule for [${r}] field is not defined. The field will be always invalid.`),this.setFieldInvalid(r,a);break}if("number"!=typeof u){console.error(`Value for ${a.rule} rule for [${r}] should be a number. The field will be always invalid.`),this.setFieldInvalid(r,a);break}if("string"!=typeof c){this.setFieldInvalid(r,a);break}if(""===c)break;((e,i)=>e.length>i)(c,u)&&this.setFieldInvalid(r,a);break;case l.MinLength:if(void 0===u){console.error(`Value for ${a.rule} rule for [${r}] field is not defined. The field will be always invalid.`),this.setFieldInvalid(r,a);break}if("number"!=typeof u){console.error(`Value for ${a.rule} rule for [${r}] should be a number. The field will be always invalid.`),this.setFieldInvalid(r,a);break}if("string"!=typeof c){this.setFieldInvalid(r,a);break}if(""===c)break;((e,i)=>e.length<i)(c,u)&&this.setFieldInvalid(r,a);break;case l.Password:if("string"!=typeof c){this.setFieldInvalid(r,a);break}if(""===c)break;(e=>s.test(e))(c)||this.setFieldInvalid(r,a);break;case l.StrongPassword:if("string"!=typeof c){this.setFieldInvalid(r,a);break}if(""===c)break;(e=>t.test(e))(c)||this.setFieldInvalid(r,a);break;case l.Number:if("string"!=typeof c){this.setFieldInvalid(r,a);break}if(""===c)break;(e=>i.test(e))(c)||this.setFieldInvalid(r,a);break;case l.MaxNumber:{if(void 0===u){console.error(`Value for ${a.rule} rule for [${r}] field is not defined. The field will be always invalid.`),this.setFieldInvalid(r,a);break}if("number"!=typeof u){console.error(`Value for ${a.rule} rule for [${r}] field should be a number. The field will be always invalid.`),this.setFieldInvalid(r,a);break}if("string"!=typeof c){this.setFieldInvalid(r,a);break}if(""===c)break;const e=+c;(Number.isNaN(e)||((e,i)=>e>i)(e,u))&&this.setFieldInvalid(r,a);break}case l.MinNumber:{if(void 0===u){console.error(`Value for ${a.rule} rule for [${r}] field is not defined. The field will be always invalid.`),this.setFieldInvalid(r,a);break}if("number"!=typeof u){console.error(`Value for ${a.rule} rule for [${r}] field should be a number. The field will be always invalid.`),this.setFieldInvalid(r,a);break}if("string"!=typeof c){this.setFieldInvalid(r,a);break}if(""===c)break;const e=+c;(Number.isNaN(e)||((e,i)=>e<i)(e,u))&&this.setFieldInvalid(r,a);break}case l.CustomRegexp:{if(void 0===u)return console.error(`Value for ${a.rule} rule for [${r}] field is not defined. This field will be always invalid.`),void this.setFieldInvalid(r,a);let e;try{e=new RegExp(u)}catch{console.error(`Value for ${a.rule} rule for [${r}] should be a valid regexp. This field will be always invalid.`),this.setFieldInvalid(r,a);break}const i=String(c);""!==i&&!e.test(i)&&this.setFieldInvalid(r,a);break}case l.MinFilesCount:if(void 0===u){console.error(`Value for ${a.rule} rule for [${r}] field is not defined. This field will be always invalid.`),this.setFieldInvalid(r,a);break}if("number"!=typeof u){console.error(`Value for ${a.rule} rule for [${r}] field should be a number. The field will be always invalid.`),this.setFieldInvalid(r,a);break}if(Number.isFinite(null==c?void 0:c.length)&&c.length<u){this.setFieldInvalid(r,a);break}break;case l.MaxFilesCount:if(void 0===u){console.error(`Value for ${a.rule} rule for [${r}] field is not defined. This field will be always invalid.`),this.setFieldInvalid(r,a);break}if("number"!=typeof u){console.error(`Value for ${a.rule} rule for [${r}] field should be a number. The field will be always invalid.`),this.setFieldInvalid(r,a);break}if(Number.isFinite(null==c?void 0:c.length)&&c.length>u){this.setFieldInvalid(r,a);break}break;case l.Files:{if(void 0===u)return console.error(`Value for ${a.rule} rule for [${r}] field is not defined. This field will be always invalid.`),void this.setFieldInvalid(r,a);if("object"!=typeof u)return console.error(`Value for ${a.rule} rule for [${r}] field should be an object. This field will be always invalid.`),void this.setFieldInvalid(r,a);const e=u.files;if("object"!=typeof e)return console.error(`Value for ${a.rule} rule for [${r}] field should be an object with files array. This field will be always invalid.`),void this.setFieldInvalid(r,a);const i=(e,i)=>{const s=Number.isFinite(i.minSize)&&e.size<i.minSize,t=Number.isFinite(i.maxSize)&&e.size>i.maxSize,l=Array.isArray(i.names)&&!i.names.includes(e.name),r=Array.isArray(i.extensions)&&!i.extensions.includes(e.name.split(".")[e.name.split(".").length-1]),o=Array.isArray(i.types)&&!i.types.includes(e.type);return s||t||l||r||o};if("object"==typeof c&&null!==c)for(let s=0,t=c.length;s<t;++s){const t=c.item(s);if(!t){this.setFieldInvalid(r,a);break}if(i(t,e)){this.setFieldInvalid(r,a);break}}break}default:{if("function"!=typeof a.validator)return console.error(`Validator for custom rule for [${r}] field should be a function. This field will be always invalid.`),void this.setFieldInvalid(r,a);const e=a.validator(c,this.fields);if("boolean"!=typeof e&&"function"!=typeof e&&console.error(`Validator return value for [${r}] field should be boolean or function. It will be cast to boolean.`),"function"==typeof e){if(!d){this.fields[r].asyncCheckPending=!1;const i=e();return n(i)?i.then((e=>{e||this.setFieldInvalid(r,a)})).catch((()=>{this.setFieldInvalid(r,a)})):(console.error(`Validator function for custom rule for [${r}] field should return a Promise. This field will be always invalid.`),void this.setFieldInvalid(r,a))}this.fields[r].asyncCheckPending=!0}e||this.setFieldInvalid(r,a)}}}validateField(e,i,s=!1){var t;i.isValid=!0;const l=[];return[...i.rules].reverse().forEach((t=>{const r=this.validateFieldRule(e,i.elem,t,s);n(r)&&l.push(r)})),i.isValid&&this.setFieldValid(e,null==(t=i.config)?void 0:t.successMessage),Promise.allSettled(l)}validateGroup(e,i){const s=[];return[...i.rules].reverse().forEach((t=>{const l=this.validateGroupRule(e,i.type,i.elems,t);n(l)&&s.push(l)})),Promise.allSettled(s)}focusInvalidField(){for(const e in this.fields){const i=this.fields[e];if(!i.isValid){setTimeout((()=>i.elem.focus()),0);break}}}afterSubmitValidation(){this.renderErrors(),this.globalConfig.focusInvalidField&&this.focusInvalidField()}validate(){return new Promise((e=>{const i=[];Object.keys(this.fields).forEach((e=>{const s=this.fields[e],t=this.validateField(e,s);n(t)&&i.push(t)})),Object.keys(this.groupFields).forEach((e=>{const s=this.groupFields[e],t=this.validateGroup(e,s);n(t)&&i.push(t)})),i.length?Promise.allSettled(i).then((()=>{this.afterSubmitValidation(),e(!0)})):(this.afterSubmitValidation(),e(!1))}))}setForm(e){this.form=e,this.form.setAttribute("novalidate","novalidate"),this.removeListener("submit",this.form,this.formSubmitHandler),this.addListener("submit",this.form,this.formSubmitHandler)}addListener(e,i,s){i.addEventListener(e,s),this.eventListeners.push({type:e,elem:i,func:s})}removeListener(e,i,s){i.removeEventListener(e,s),this.eventListeners=this.eventListeners.filter((s=>s.type!==e||s.elem!==i))}addField(e,i,s){if("string"!=typeof e)throw Error("Field selector is not valid. Please specify a string selector.");const t=document.querySelector(e);if(!t)throw Error(`Field with ${e} selector not found! Please check the field selector.`);if(!Array.isArray(i)||!i.length)throw Error(`Rules argument for the field [${e}] should be an array and should contain at least 1 element.`);return i.forEach((i=>{if(!("rule"in i||"validator"in i||"plugin"in i))throw Error(`Rules argument for the field [${e}] must contain at least one rule or validator property.`);if(!(i.validator||i.plugin||i.rule&&Object.values(l).includes(i.rule)))throw Error(`Rule should be one of these types: ${Object.values(l).join(", ")}. Provided value: ${i.rule}`)})),this.fields[e]={elem:t,rules:i,isValid:void 0,config:s},this.setListeners(t),this.isSubmitted&&this.validate(),this}removeField(e){if("string"!=typeof e)throw Error("Field selector is not valid. Please specify a string selector.");if(!this.fields[e])return console.error("Field not found. Check the field selector."),this;const i=this.getListenerType(this.fields[e].elem.type);return this.removeListener(i,this.fields[e].elem,this.handlerChange),this.clearErrors(),delete this.fields[e],this}removeGroup(e){if("string"!=typeof e)throw Error("Group selector is not valid. Please specify a string selector.");return this.groupFields[e]?(this.groupFields[e].elems.forEach((e=>{const i=this.getListenerType(e.type);this.removeListener(i,e,this.handlerChange)})),this.clearErrors(),delete this.groupFields[e],this):(console.error("Group not found. Check the group selector."),this)}addRequiredGroup(e,i,s,t){if("string"!=typeof e)throw Error("Group selector is not valid. Please specify a string selector.");const l=document.querySelector(e);if(!l)throw Error(`Group with ${e} selector not found! Please check the group selector.`);const r=l.querySelectorAll("input"),a=Array.from(r).every((e=>"radio"===e.type)),n=Array.from(r).every((e=>"checkbox"===e.type));if(!a&&!n)throw Error("Group should contain either or checkboxes or radio buttons");return this.groupFields[e]={rules:[{rule:o.Required,errorMessage:i,successMessage:t}],groupElem:l,elems:Array.from(r),type:a?"radio":"checkbox",isDirty:!1,isValid:void 0,config:s},r.forEach((e=>{this.setListeners(e)})),this}getListenerType(e){switch(e){case"checkbox":case"select-one":case"file":case"radio":return"change";case"date":return"input";default:return"keyup"}}setListeners(e){const i=this.getListenerType(e.type);this.removeListener(i,e,this.handlerChange),this.addListener(i,e,this.handlerChange)}clearErrors(){var e,i,s,t,l,r;this.errorLabels.forEach((e=>e.remove())),this.successLabels.forEach((e=>e.remove()));for(const l in this.fields){const r=this.fields[l],o=(null==(e=r.config)?void 0:e.errorFieldStyle)||this.globalConfig.errorFieldStyle;Object.keys(o).forEach((e=>{r.elem.style[e]=""}));const a=(null==(i=r.config)?void 0:i.successFieldStyle)||this.globalConfig.successFieldStyle||{};Object.keys(a).forEach((e=>{r.elem.style[e]=""})),r.elem.classList.remove((null==(s=r.config)?void 0:s.errorFieldCssClass)||this.globalConfig.errorFieldCssClass,(null==(t=r.config)?void 0:t.successFieldCssClass)||this.globalConfig.successFieldCssClass)}for(const e in this.groupFields){const i=this.groupFields[e],s=(null==(l=i.config)?void 0:l.errorFieldStyle)||this.globalConfig.errorFieldStyle;Object.keys(s).forEach((e=>{i.elems.forEach((s=>{var t;s.style[e]="",s.classList.remove((null==(t=i.config)?void 0:t.errorFieldCssClass)||this.globalConfig.errorFieldCssClass)}))}));const t=(null==(r=i.config)?void 0:r.successFieldStyle)||this.globalConfig.successFieldStyle||{};Object.keys(t).forEach((e=>{i.elems.forEach((s=>{var t;s.style[e]="",s.classList.remove((null==(t=i.config)?void 0:t.successFieldCssClass)||this.globalConfig.successFieldCssClass)}))}))}this.tooltips=[]}isTooltip(){return!!this.globalConfig.tooltip}lockForm(){const e=this.form.querySelectorAll("input, textarea, button, select");for(let i=0,s=e.length;i<s;++i)e[i].setAttribute("disabled","disabled"),e[i].style.pointerEvents="none",e[i].style.webkitFilter="grayscale(100%)",e[i].style.filter="grayscale(100%)"}unlockForm(){const e=this.form.querySelectorAll("input, textarea, button, select");for(let i=0,s=e.length;i<s;++i)e[i].removeAttribute("disabled"),e[i].style.pointerEvents="",e[i].style.webkitFilter="",e[i].style.filter=""}renderTooltip(e,i,s){var t;const{top:l,left:r,width:o,height:a}=e.getBoundingClientRect(),n=i.getBoundingClientRect(),d=s||(null==(t=this.globalConfig.tooltip)?void 0:t.position);switch(d){case"left":i.style.top=l+a/2-n.height/2+"px",i.style.left=r-n.width-5+"px";break;case"top":i.style.top=l-n.height-5+"px",i.style.left=r+o/2-n.width/2+"px";break;case"right":i.style.top=l+a/2-n.height/2+"px",i.style.left=`${r+o+5}px`;break;case"bottom":i.style.top=`${l+a+5}px`,i.style.left=r+o/2-n.width/2+"px"}return i.dataset.direction=d,{refresh:()=>{this.renderTooltip(e,i,s)}}}createErrorLabelElem(e,i,s){const t=document.createElement("div");t.innerHTML=i;const l=this.isTooltip()?null==s?void 0:s.errorLabelStyle:(null==s?void 0:s.errorLabelStyle)||this.globalConfig.errorLabelStyle;return Object.assign(t.style,l),t.classList.add((null==s?void 0:s.errorLabelCssClass)||this.globalConfig.errorLabelCssClass,"just-validate-error-label"),this.isTooltip()&&(t.dataset.tooltip="true"),this.globalConfig.testingMode&&(t.dataset.testId=`error-label-${e}`),this.errorLabels.push(t),t}createSuccessLabelElem(e,i,s){if(void 0===i)return null;const t=document.createElement("div");t.innerHTML=i;const l=(null==s?void 0:s.successLabelStyle)||this.globalConfig.successLabelStyle;return Object.assign(t.style,l),t.classList.add((null==s?void 0:s.successLabelCssClass)||this.globalConfig.successLabelCssClass,"just-validate-success-label"),this.globalConfig.testingMode&&(t.dataset.testId=`success-label-${e}`),this.successLabels.push(t),t}renderFieldLabel(e,i){var s,t,l,r,o,a,n;if("checkbox"===e.type||"radio"===e.type){const n=document.querySelector(`label[for="${e.getAttribute("id")}"]`);"label"===(null==(t=null==(s=e.parentElement)?void 0:s.tagName)?void 0:t.toLowerCase())?null==(r=null==(l=e.parentElement)?void 0:l.parentElement)||r.appendChild(i):n?null==(o=n.parentElement)||o.appendChild(i):null==(a=e.parentElement)||a.appendChild(i)}else null==(n=e.parentElement)||n.appendChild(i)}renderErrors(){var e,i,s,t,l,r;if(this.isSubmitted){this.clearErrors(),this.isValid=!0;for(const s in this.groupFields){const t=this.groupFields[s];if(t.isValid){t.elems.forEach((e=>{var i,s;Object.assign(e.style,(null==(i=t.config)?void 0:i.successFieldStyle)||this.globalConfig.successFieldStyle),e.classList.add((null==(s=t.config)?void 0:s.successFieldCssClass)||this.globalConfig.successFieldCssClass)}));const e=this.createSuccessLabelElem(s,t.successMessage,t.config);e&&t.groupElem.appendChild(e);continue}this.isValid=!1,t.elems.forEach((e=>{var i,s;Object.assign(e.style,(null==(i=t.config)?void 0:i.errorFieldStyle)||this.globalConfig.errorFieldStyle),e.classList.add((null==(s=t.config)?void 0:s.errorFieldCssClass)||this.globalConfig.errorFieldCssClass)}));const l=this.createErrorLabelElem(s,t.errorMessage,t.config);t.groupElem.appendChild(l),this.isTooltip()&&this.tooltips.push(this.renderTooltip(t.groupElem,l,null==(i=null==(e=t.config)?void 0:e.tooltip)?void 0:i.position))}for(const e in this.fields){const i=this.fields[e];if(i.isValid){if(!i.asyncCheckPending){const t=this.createSuccessLabelElem(e,i.successMessage,i.config);t&&this.renderFieldLabel(i.elem,t),i.elem.classList.add((null==(s=i.config)?void 0:s.successFieldCssClass)||this.globalConfig.successFieldCssClass)}continue}this.isValid=!1,i.elem.classList.add((null==(t=i.config)?void 0:t.errorFieldCssClass)||this.globalConfig.errorFieldCssClass);const o=this.createErrorLabelElem(e,i.errorMessage,i.config);this.renderFieldLabel(i.elem,o),this.isTooltip()&&this.tooltips.push(this.renderTooltip(i.elem,o,null==(r=null==(l=i.config)?void 0:l.tooltip)?void 0:r.position))}}}destroy(){this.eventListeners.forEach((e=>{this.removeListener(e.type,e.elem,e.func)})),Object.keys(this.customStyleTags).forEach((e=>{this.customStyleTags[e].remove()})),this.clearErrors(),this.globalConfig.lockForm&&this.unlockForm()}refresh(){this.destroy(),this.form?(this.initialize(this.form,this.globalConfig),Object.keys(this.fields).forEach((e=>{this.addField(e,[...this.fields[e].rules],this.fields[e].config)}))):console.error("Cannot initialize the library! Form is not defined")}setCurrentLocale(e){"string"==typeof e||void 0===e?(this.currentLocale=e,this.isSubmitted&&this.validate()):console.error("Current locale should be a string")}onSuccess(e){return this.onSuccessCallback=e,this}onFail(e){return this.onFailCallback=e,this}}}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
